#include<iostream>
using namespace std;
struct node{
    int data;
    node*left,*right;
    node(int key){
        data = key;
        left = NULL;
        right = NULL;
    }

};
node*create(node*root,int key){
    if(root == NULL){
        return new node(key);
    }
    else if(root->data > key){
        root->left = create(root->left,key);
    }
    else{
        root->right = create(root->right,key);
    }
    return root;
}
int displayinorder(node*root){
    if(root == NULL){
        return 0;
    }
    displayinorder(root->left);
    cout<<root->data<<"\t";
    displayinorder(root->right);
    return 0;
}
int search(node*root,int key){
    if(root == NULL){
        cout<<"Element is not present"<<endl;
        return 0;
    }
    if(root->data == key){
        cout<<"Element is present"<<endl;
        return 1;
    }
    else if(root->data > key){
        search(root->left,key);
    }
     else if(root->data <= key){
        search(root->right,key);
    }
    
    return 0 ;

}
int minValue(node*root){
    if(root == NULL){
        cout<<"Tree is empty "<<endl;
        return 0;
    }
    while(root->left != NULL){
        root = root->left;
    }
    cout<<"minimum value is : "<<root->data<<endl;
    return 1;
}
int change(node*root){
    if(root == NULL){
        return 0;
    }
    node*temp = root->left;
    root->left = root->right;
    root->right = temp;
    change(root->left);
    change(root->right);
    
    return 0;

}
int height(node*root){
    if(root == NULL){
        return -1;
    }
    else{
        int left = height(root->left);
        int right = height(root->right);
        return max(left,right)+1;
    }
}
int main(){
    int ch;
    node*root = NULL;
    while(1){
        cout<<"-------MENU---------"<<endl;
        cout<<"Enter 1 for insert node:"<<endl;
        cout<<"Enter 2 for height of tree:"<<endl;
        cout<<"Enter 3 for display inorder :"<<endl;
        cout<<"Enter 4 for min value: "<<endl;
        cout<<"Enter 5 for search:"<<endl;
        cout<<"Enter 6 for Mirror image:"<<endl;
        cout<<"Enter your choice: ";
        cin>>ch;
    switch(ch){
        case 1:
            int key;
            cout<<"Enter the Key to be inserted: ";
            cin>>key;
            root = create(root,key);
            break;
        case 2:
            cout<<"Height of the tree is : "<<height(root)<<endl;
            break;
        case 3:
            displayinorder(root);
            cout<<endl;
            break;
        case 4:
            minValue(root);
            break;
        case 5:
            int a;
            cout<<"Enter the key to be Search;";
            cin>>a;
            search(root,a);
            break;
        case 6:
            change(root);
            break;
        default :
            cout<<"Invalid choice please re-enter:";
    }
    }
     return 0;
}